import io
import [] : string
import [] : functional
import [range, is_digit] : "../utils/helpers"

const input = io.readf("input.txt").split("\n")

const reverse_string = (str) => {
    var reversed_string_list = []
    str.chars().forEach((s) => {
        reversed_string_list.insert(s, 0)
    })
    return reversed_string_list.join("")
}


const text_digits = [
        "one", "two", "three",
        "four", "five", "six",
        "seven", "eight", "nine"
    ]

const text_digits_reversed = text_digits.map((d) => reverse_string(d))

const text_digits_map = {
    "one": 1, 
    "two": 2, 
    "three": 3,
    "four": 4, 
    "five": 5, 
    "six": 6,
    "seven": 7, 
    "eight": 8, 
    "nine": 9
}

const get_calibration_sum = (input) => {
    var calibrations = []

    for (input, index, row) {
        const reversed_row = reverse_string(row)
        var first_digit;
        var last_digit;

        const chars = row.chars()
        
        for (chars, j, char) {

            if (is_digit(char)) {
                first_digit = number(char)
                break
            }

            for (text_digits, t, td) {
                if (char == td[0]) {
                    const substr = substring(row, j, td.length())
                    if (substr == td) {
                        first_digit = text_digits_map[substr]
                        break
                    }
                }
            }

            if (first_digit != None) {
                break
            }
        }

        for (range(chars.length()-1, -1), j, char_index) {
            const char = chars[char_index]
            if (is_digit(char)) {
                last_digit = number(char)
                break
            }

            for (text_digits_reversed, t, td) {
                if (char == td[0]) {
                    const substr = substring(reversed_row, j, td.length())
                    if (substr == td) {
                        last_digit = substr.reverse_string()
                        last_digit = text_digits_map[last_digit]
                        break
                    }
                }
            }

            if (last_digit != None) {
                break
            }
        }

        const calibration = number(f"${first_digit}${last_digit}")
        calibrations.append(calibration)
    }

    return calibrations.reduce((a, b) => a + b)
}

const answer = () => get_calibration_sum(input)